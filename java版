//前驱prev
//后继next
class Node{
	int val;//date|element
	Node next;//如果 next == null 表示最后一个节点
	
	Node(int val){
		this.val = val;
		this.next = null;
	}
	
	public String toString(){
		return String.format("Node(%d)",val);
	}
	
}
public class MyLinkedList{
	public static void main(String[] args){
		Node head = null;
		head = pushFront(head,0);
		head = pushFront(head,1);
		head = pushFront(head,2);
		/*
		head = popBack(head);
		head = popFront(head);
		head = popFront(head);
		head = popFront(head);
		*/
		head = reverseList(head);
		/*
		for(Node cur = head;cur != null;cur = cur.next){
			System.out.println(cur);
		}
		*/
		print(head);
	}
	/*
	int val = 0;
	Node node = new Node(val);
	node.new = head;
	head = node;
	*/
	//头插
	private static Node pushFront(Node head,int val){
		Node node = new Node(val);
		node.next = head;
		return node;
	}
	//尾插
	private static Node pushBack(Node head,int val){
		Node node = new Node(val);
		
		if(head == null){
			return node;
		}
		else{
			Node last = head;
			while(last.next != null){
				last = last.next;
			}
			last.next = node;
			return head;
		}
	}
	//头删
	private static Node popFront(Node head){
		if(head == null){
			System.err.println("链表为空，不能删除！");
			return head;
		}
		head = head.next;
		return head;
	}
	//尾删
	private static Node popBack(Node head){
		if(head == null){
			System.err.println("链表为空，不能删除！");
			return head;
		}
		Node last = head;
		if(last.next == null){
			last = null;
			return head;
		}
		else{
			while(last.next.next != null){
				last = last.next;
			}
			last.next = null;
			return head;
		}
	}
	//打印
	private static void print(Node head){
		for(Node cur = head;cur != null;cur = cur.next){
			System.out.println(cur);
		}
	}
	//反转链表
	public static Node reverseList(Node head){
		if(head == null){
			return head;
		}
		Node p1 = head;
		Node p2 = head.next;
		Node p3 = head;
		while (p2 != null){
			p3.next = p2.next;
			p2.next = p1;
			p1 = p2;
			p2 = p3.next;
		}
		return p1;
		
	}
}
